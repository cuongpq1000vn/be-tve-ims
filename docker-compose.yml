version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SECRET_PATH: ${SECRET_PATH}
        SERVICE_PATH: ${SERVICE_PATH}
    container_name: spring_boot_app
    env_file:
      - .env
    ports:
      - "${SERVER_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
      - uploads_public_data:/app/uploads-public
      - logs:/app/logs
      - tokens:/app/.tokens
      - ./google-auth:/app/google-auth
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_DBNAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_DBNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  uploads_data:
  uploads_public_data:
  logs:
  tokens:
